import sympy as sp
import Tarea 

A = sp.Matrix([[1,-1],[1/2,-1]])
# sp.pprint(A)
B = sp.Matrix([-1,1])
# sp.pprint(B)
M = sp.Matrix(sp.BlockMatrix([sp.eye(A.rows) - A,-B]))

reduced, pivots = M.rref()
# sp.pprint(reduced)
# sp.pprint(pivots)
free_vars = [i for i in range(M.cols) if i not in pivots]
basis     = []

# print(free_vars)

for free_var in free_vars:
        # for each free variable, we will set it to 1 and all others
        # to 0.  Then, we will use back substitution to solve the system
        vec           = [M.zero] * M.cols
        # sp.pprint(vec)
        vec[free_var] = M.one
        # sp.pprint(vec)

        for piv_row, piv_col in enumerate(pivots):
            # print(piv_row,piv_col)
            vec[piv_col] -= reduced[piv_row, free_var]
            # print(vec)

        basis.append(vec)


